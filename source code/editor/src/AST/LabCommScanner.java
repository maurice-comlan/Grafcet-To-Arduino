package AST;

import beaver.Scanner;
import beaver.Scanner.Exception;
import beaver.Symbol;
import java.io.IOException;
import java.io.Reader;

public final class LabCommScanner
  extends Scanner
{
  public static final int YYEOF = -1;
  private static final int ZZ_BUFFERSIZE = 16384;
  public static final int YYINITIAL = 0;
  private static final int[] ZZ_LEXSTATE = { 0, 0 };
  private static final String ZZ_CMAP_PACKED = "\t\007\001\003\001\001\001\000\001\003\001\002\016\007\004\000\001\003\003\000\001\006\005\000\001\005\001\000\001$\002\000\001\004\001\b\t\t\001\000\001#\005\000\032\006\001!\001\000\001\"\001\000\001\036\001\000\001\013\001\032\001\026\001\022\001\017\001\023\001\035\001\034\001\031\002\006\001\016\001\f\001\033\001\030\001\r\001\006\001\024\001\n\001\020\001\025\001\027\002\006\001\021\001\006\001\037\001\000\001 \001\000!\007\002\000\004\006\004\000\001\006\002\000\001\007\007\000\001\006\004\000\001\006\005\000\027\006\001\000\037\006\001\000Ǌ\006\004\000\f\006\016\000\005\006\007\000\001\006\001\000\001\006\021\000p\007\005\006\001\000\002\006\002\000\004\006\b\000\001\006\001\000\003\006\001\000\001\006\001\000\024\006\001\000S\006\001\000\006\001\000\005\007\002\000\006\t\000&\006\002\000\001\006\007\000'\006\t\000-\007\001\000\001\007\001\000\002\007\001\000\002\007\001\000\001\007\b\000\033\006\005\000\003\006\r\000\004\007\007\000\001\006\004\000\013\007\005\000+\006\037\007\004\000\002\006\001\007c\006\001\000\001\006\b\007\001\000\006\007\002\006\002\007\001\000\004\007\002\006\n\007\003\006\002\000\001\006\017\000\001\007\001\006\001\007\036\006\033\007\002\000Y\006\013\007\001\006\016\000\n\007!\006\t\007\002\006\004\000\001\006\005\000\026\006\004\007\001\006\t\007\001\006\003\007\001\006\005\007\022\000\031\006\003\007¤\000\004\0076\006\003\007\001\006\022\007\001\006\007\007\n\006\002\007\002\000\n\007\001\000\007\006\001\000\007\006\001\000\003\007\001\000\b\006\002\000\002\006\002\000\026\006\001\000\007\006\001\000\001\006\003\000\004\006\002\000\001\007\001\006\007\007\002\000\002\007\002\000\003\007\001\006\b\000\001\007\004\000\002\006\001\000\003\006\002\007\002\000\n\007\004\006\007\000\001\006\005\000\003\007\001\000\006\006\004\000\002\006\002\000\026\006\001\000\007\006\001\000\002\006\001\000\002\006\001\000\002\006\002\000\001\007\001\000\005\007\004\000\002\007\002\000\003\007\003\000\001\007\007\000\004\006\001\000\001\006\007\000\f\007\003\006\001\007\013\000\003\007\001\000\t\006\001\000\003\006\001\000\026\006\001\000\007\006\001\000\002\006\001\000\005\006\002\000\001\007\001\006\b\007\001\000\003\007\001\000\003\007\002\000\001\006\017\000\002\006\002\007\002\000\n\007\001\000\001\006\017\000\003\007\001\000\b\006\002\000\002\006\002\000\026\006\001\000\007\006\001\000\002\006\001\000\005\006\002\000\001\007\001\006\007\007\002\000\002\007\002\000\003\007\b\000\002\007\004\000\002\006\001\000\003\006\002\007\002\000\n\007\001\000\001\006\020\000\001\007\001\006\001\000\006\006\003\000\003\006\001\000\004\006\003\000\002\006\001\000\001\006\001\000\002\006\003\000\002\006\003\000\003\006\003\000\f\006\004\000\005\007\003\000\003\007\001\000\004\007\002\000\001\006\006\000\001\007\016\000\n\007\t\000\001\006\007\000\003\007\001\000\b\006\001\000\003\006\001\000\027\006\001\000\n\006\001\000\005\006\003\000\001\006\007\007\001\000\003\007\001\000\004\007\007\000\002\007\001\000\002\006\006\000\002\006\002\007\002\000\n\007\022\000\002\007\001\000\b\006\001\000\003\006\001\000\027\006\001\000\n\006\001\000\005\006\002\000\001\007\001\006\007\007\001\000\003\007\001\000\004\007\007\000\002\007\007\000\001\006\001\000\002\006\002\007\002\000\n\007\001\000\002\006\017\000\002\007\001\000\b\006\001\000\003\006\001\000)\006\002\000\001\006\007\007\001\000\003\007\001\000\004\007\001\006\b\000\001\007\b\000\002\006\002\007\002\000\n\007\n\000\006\006\002\000\002\007\001\000\022\006\003\000\030\006\001\000\t\006\001\000\001\006\002\000\007\006\003\000\001\007\004\000\006\007\001\000\001\007\001\000\b\007\022\000\002\007\r\0000\006\001\007\002\006\007\007\004\000\b\006\b\007\001\000\n\007'\000\002\006\001\000\001\006\002\000\002\006\001\000\001\006\002\000\001\006\006\000\004\006\001\000\007\006\001\000\003\006\001\000\001\006\001\000\001\006\002\000\002\006\001\000\004\006\001\007\002\006\006\007\001\000\002\007\001\006\002\000\005\006\001\000\001\006\001\000\006\007\002\000\n\007\002\000\002\006\"\000\001\006\027\000\002\007\006\000\n\007\013\000\001\007\001\000\001\007\001\000\001\007\004\000\002\007\b\006\001\000$\006\004\000\024\007\001\000\002\007\005\006\013\007\001\000$\007\t\000\001\0079\000+\006\024\007\001\006\n\007\006\000\006\006\004\007\004\006\003\007\001\006\003\007\002\006\007\007\003\006\004\007\r\006\f\007\001\006\017\007\002\000&\006\n\000+\006\001\000\001\006\003\000ŉ\006\001\000\004\006\002\000\007\006\001\000\001\006\001\000\004\006\002\000)\006\001\000\004\006\002\000!\006\001\000\004\006\002\000\007\006\001\000\001\006\001\000\004\006\002\000\017\006\001\0009\006\001\000\004\006\002\000C\006\002\000\003\007 \000\020\006\020\000U\006\f\000ɬ\006\002\000\021\006\001\000\032\006\005\000K\006\003\000\003\006\017\000\r\006\001\000\004\006\003\007\013\000\022\006\003\007\013\000\022\006\002\007\f\000\r\006\001\000\003\006\001\000\002\007\f\0004\006 \007\003\000\001\006\003\000\002\006\001\007\002\000\n\007!\000\003\007\002\000\n\007\006\000X\006\b\000)\006\001\007\001\006\005\000F\006\n\000\035\006\003\000\f\007\004\000\f\007\n\000\n\007\036\006\002\000\005\006\013\000,\006\004\000\021\007\007\006\002\007\006\000\n\007&\000\027\006\005\007\004\0005\006\n\007\001\000\035\007\002\000\013\007\006\000\n\007\r\000\001\006X\000\005\007/\006\021\007\007\006\004\000\n\007\021\000\t\007\f\000\003\007\036\006\n\007\003\000\002\006\n\007\006\000&\006\016\007\f\000$\006\024\007\b\000\n\007\003\000\003\006\n\007$\006R\000\003\007\001\000\025\007\004\006\001\007\004\006\001\007\r\000À\006'\007\025\000\004\007Ė\006\002\000\006\006\002\000&\006\002\000\006\006\002\000\b\006\001\000\001\006\001\000\001\006\001\000\001\006\001\000\037\006\002\0005\006\001\000\007\006\001\000\001\006\003\000\003\006\001\000\007\006\003\000\004\006\002\000\006\006\004\000\r\006\005\000\003\006\001\000\007\006\016\000\005\007\032\000\005\007\020\000\002\006\023\000\001\006\013\000\005\007\005\000\006\007\001\000\001\006\r\000\001\006\020\000\r\006\003\000\032\006\026\000\r\007\004\000\001\007\003\000\f\007\021\000\001\006\004\000\001\006\002\000\n\006\001\000\001\006\003\000\005\006\006\000\001\006\001\000\001\006\001\000\001\006\001\000\004\006\001\000\013\006\002\000\004\006\005\000\005\006\004\000\001\006\021\000)\006੷\000/\006\001\000/\006\001\000\006\006\000\004\006\003\007\016\000&\006\n\0006\006\t\000\001\006\017\000\001\007\027\006\t\000\007\006\001\000\007\006\001\000\007\006\001\000\007\006\001\000\007\006\001\000\007\006\001\000\007\006\001\000\007\006\001\000 \007/\000\001\006Ǖ\000\003\006\031\000\t\006\006\007\001\000\005\006\002\000\005\006\004\000V\006\002\000\002\007\002\000\003\006\001\000Z\006\001\000\004\006\005\000)\006\003\000^\006\021\000\033\0065\000\020\006Ȁ\000ᦶ\006J\000凌\0064\000ҍ\006C\000.\006\002\000č\006\003\000\020\006\n\007\002\006\024\000/\006\001\007\f\000\002\007\001\000\031\006\b\000P\006\002\007%\000\t\006\002\000g\006\002\000\004\006\001\000\002\006\016\000\n\006P\000\b\006\001\007\003\006\001\007\004\006\001\007\027\006\005\007\020\000\001\006\007\0004\006\f\000\002\0072\006\021\007\013\000\n\007\006\000\022\007\006\006\003\000\001\006\004\000\n\007\034\006\b\007\002\000\027\006\r\007\f\000\035\006\003\000\004\007/\006\016\007\016\000\001\006\n\007&\000)\006\016\007\t\000\003\006\001\007\b\006\002\007\002\000\n\007\006\000\027\006\003\000\001\006\001\007\004\0000\006\001\007\001\006\003\007\002\006\002\007\005\006\002\007\001\006\001\007\001\006\030\000\003\006#\000\006\006\002\000\006\006\002\000\006\006\t\000\007\006\001\000\007\006\000#\006\b\007\001\000\002\007\002\000\n\007\006\000⮤\006\f\000\027\006\004\0001\006℄\000Į\006\002\000>\006\002\000j\006&\000\007\006\f\000\005\006\005\000\001\006\001\007\n\006\001\000\r\006\001\000\005\006\001\000\001\006\001\000\002\006\001\000\002\006\001\000l\006!\000ū\006\022\000@\006\002\0006\006(\000\r\006\003\000\020\007\020\000\007\007\f\000\002\006\030\000\003\006\031\000\001\006\006\000\005\006\001\000\006\002\000\001\007\004\000\001\006\013\000\n\007\007\000\032\006\004\000\001\006\001\000\032\006\013\000Y\006\003\000\006\006\002\000\006\006\002\000\006\006\002\000\003\006\003\000\002\006\003\000\002\006\022\000\003\007\004\000\f\006\001\000\032\006\001\000\023\006\001\000\002\006\001\000\017\006\002\000\016\006\"\000{\006E\0005\006\000\001\007\000\035\006\003\0001\006/\000\037\006\021\000\033\0065\000\036\006\002\000$\006\004\000\b\006\001\000\005\006*\000\006\002\000\n\007͖\000\006\006\002\000\001\006\001\000,\006\001\000\002\006\003\000\001\006\002\000\027\006ª\000\026\006\n\000\032\006Æ\000\001\006\003\007\001\000\002\007\005\000\004\007\004\006\001\000\003\006\001\000\033\006\004\000\003\007\004\000\001\007 \000\035\006\0006\006\n\000\026\006\n\000\023\006\000I\006η\000\003\0075\006\017\007\037\000\n\007\020\000\003\007-\006\013\007\002\000\001\007ག\000ͯ\006\000c\006஝\000Я\006㏑\000ȹ\006䗇\000\002\006Ⅳ\000\005\007\003\000\026\007\002\000\007\007\036\000\004\007\000\003\007ƻ\000U\006\001\000G\006\001\000\002\006\002\000\001\006\002\000\002\006\002\000\004\006\001\000\f\006\001\000\001\006\001\000\007\006\001\000A\006\001\000\004\006\002\000\b\006\001\000\007\006\001\000\034\006\001\000\004\006\001\000\005\006\001\000\001\006\003\000\007\006\001\000Ŕ\006\002\000\031\006\001\000\031\006\001\000\037\006\001\000\031\006\001\000\037\006\001\000\031\006\001\000\037\006\001\000\031\006\001\000\037\006\001\000\031\006\001\000\b\006\002\0002\007⠀\000ꛗ\006)\000ဵ\006\013\000Þ\006㿢\000Ȟ\006￿\000￿\000￿\000￿\000￿\000￿\000￿\000￿\000￿\000￿\000￿\000׮\000\001\007\036\000`\007\000ð\007￿\000￿\000︒\000";
  private static final char[] ZZ_CMAP = zzUnpackCMap("\t\007\001\003\001\001\001\000\001\003\001\002\016\007\004\000\001\003\003\000\001\006\005\000\001\005\001\000\001$\002\000\001\004\001\b\t\t\001\000\001#\005\000\032\006\001!\001\000\001\"\001\000\001\036\001\000\001\013\001\032\001\026\001\022\001\017\001\023\001\035\001\034\001\031\002\006\001\016\001\f\001\033\001\030\001\r\001\006\001\024\001\n\001\020\001\025\001\027\002\006\001\021\001\006\001\037\001\000\001 \001\000!\007\002\000\004\006\004\000\001\006\002\000\001\007\007\000\001\006\004\000\001\006\005\000\027\006\001\000\037\006\001\000Ǌ\006\004\000\f\006\016\000\005\006\007\000\001\006\001\000\001\006\021\000p\007\005\006\001\000\002\006\002\000\004\006\b\000\001\006\001\000\003\006\001\000\001\006\001\000\024\006\001\000S\006\001\000\006\001\000\005\007\002\000\006\t\000&\006\002\000\001\006\007\000'\006\t\000-\007\001\000\001\007\001\000\002\007\001\000\002\007\001\000\001\007\b\000\033\006\005\000\003\006\r\000\004\007\007\000\001\006\004\000\013\007\005\000+\006\037\007\004\000\002\006\001\007c\006\001\000\001\006\b\007\001\000\006\007\002\006\002\007\001\000\004\007\002\006\n\007\003\006\002\000\001\006\017\000\001\007\001\006\001\007\036\006\033\007\002\000Y\006\013\007\001\006\016\000\n\007!\006\t\007\002\006\004\000\001\006\005\000\026\006\004\007\001\006\t\007\001\006\003\007\001\006\005\007\022\000\031\006\003\007¤\000\004\0076\006\003\007\001\006\022\007\001\006\007\007\n\006\002\007\002\000\n\007\001\000\007\006\001\000\007\006\001\000\003\007\001\000\b\006\002\000\002\006\002\000\026\006\001\000\007\006\001\000\001\006\003\000\004\006\002\000\001\007\001\006\007\007\002\000\002\007\002\000\003\007\001\006\b\000\001\007\004\000\002\006\001\000\003\006\002\007\002\000\n\007\004\006\007\000\001\006\005\000\003\007\001\000\006\006\004\000\002\006\002\000\026\006\001\000\007\006\001\000\002\006\001\000\002\006\001\000\002\006\002\000\001\007\001\000\005\007\004\000\002\007\002\000\003\007\003\000\001\007\007\000\004\006\001\000\001\006\007\000\f\007\003\006\001\007\013\000\003\007\001\000\t\006\001\000\003\006\001\000\026\006\001\000\007\006\001\000\002\006\001\000\005\006\002\000\001\007\001\006\b\007\001\000\003\007\001\000\003\007\002\000\001\006\017\000\002\006\002\007\002\000\n\007\001\000\001\006\017\000\003\007\001\000\b\006\002\000\002\006\002\000\026\006\001\000\007\006\001\000\002\006\001\000\005\006\002\000\001\007\001\006\007\007\002\000\002\007\002\000\003\007\b\000\002\007\004\000\002\006\001\000\003\006\002\007\002\000\n\007\001\000\001\006\020\000\001\007\001\006\001\000\006\006\003\000\003\006\001\000\004\006\003\000\002\006\001\000\001\006\001\000\002\006\003\000\002\006\003\000\003\006\003\000\f\006\004\000\005\007\003\000\003\007\001\000\004\007\002\000\001\006\006\000\001\007\016\000\n\007\t\000\001\006\007\000\003\007\001\000\b\006\001\000\003\006\001\000\027\006\001\000\n\006\001\000\005\006\003\000\001\006\007\007\001\000\003\007\001\000\004\007\007\000\002\007\001\000\002\006\006\000\002\006\002\007\002\000\n\007\022\000\002\007\001\000\b\006\001\000\003\006\001\000\027\006\001\000\n\006\001\000\005\006\002\000\001\007\001\006\007\007\001\000\003\007\001\000\004\007\007\000\002\007\007\000\001\006\001\000\002\006\002\007\002\000\n\007\001\000\002\006\017\000\002\007\001\000\b\006\001\000\003\006\001\000)\006\002\000\001\006\007\007\001\000\003\007\001\000\004\007\001\006\b\000\001\007\b\000\002\006\002\007\002\000\n\007\n\000\006\006\002\000\002\007\001\000\022\006\003\000\030\006\001\000\t\006\001\000\001\006\002\000\007\006\003\000\001\007\004\000\006\007\001\000\001\007\001\000\b\007\022\000\002\007\r\0000\006\001\007\002\006\007\007\004\000\b\006\b\007\001\000\n\007'\000\002\006\001\000\001\006\002\000\002\006\001\000\001\006\002\000\001\006\006\000\004\006\001\000\007\006\001\000\003\006\001\000\001\006\001\000\001\006\002\000\002\006\001\000\004\006\001\007\002\006\006\007\001\000\002\007\001\006\002\000\005\006\001\000\001\006\001\000\006\007\002\000\n\007\002\000\002\006\"\000\001\006\027\000\002\007\006\000\n\007\013\000\001\007\001\000\001\007\001\000\001\007\004\000\002\007\b\006\001\000$\006\004\000\024\007\001\000\002\007\005\006\013\007\001\000$\007\t\000\001\0079\000+\006\024\007\001\006\n\007\006\000\006\006\004\007\004\006\003\007\001\006\003\007\002\006\007\007\003\006\004\007\r\006\f\007\001\006\017\007\002\000&\006\n\000+\006\001\000\001\006\003\000ŉ\006\001\000\004\006\002\000\007\006\001\000\001\006\001\000\004\006\002\000)\006\001\000\004\006\002\000!\006\001\000\004\006\002\000\007\006\001\000\001\006\001\000\004\006\002\000\017\006\001\0009\006\001\000\004\006\002\000C\006\002\000\003\007 \000\020\006\020\000U\006\f\000ɬ\006\002\000\021\006\001\000\032\006\005\000K\006\003\000\003\006\017\000\r\006\001\000\004\006\003\007\013\000\022\006\003\007\013\000\022\006\002\007\f\000\r\006\001\000\003\006\001\000\002\007\f\0004\006 \007\003\000\001\006\003\000\002\006\001\007\002\000\n\007!\000\003\007\002\000\n\007\006\000X\006\b\000)\006\001\007\001\006\005\000F\006\n\000\035\006\003\000\f\007\004\000\f\007\n\000\n\007\036\006\002\000\005\006\013\000,\006\004\000\021\007\007\006\002\007\006\000\n\007&\000\027\006\005\007\004\0005\006\n\007\001\000\035\007\002\000\013\007\006\000\n\007\r\000\001\006X\000\005\007/\006\021\007\007\006\004\000\n\007\021\000\t\007\f\000\003\007\036\006\n\007\003\000\002\006\n\007\006\000&\006\016\007\f\000$\006\024\007\b\000\n\007\003\000\003\006\n\007$\006R\000\003\007\001\000\025\007\004\006\001\007\004\006\001\007\r\000À\006'\007\025\000\004\007Ė\006\002\000\006\006\002\000&\006\002\000\006\006\002\000\b\006\001\000\001\006\001\000\001\006\001\000\001\006\001\000\037\006\002\0005\006\001\000\007\006\001\000\001\006\003\000\003\006\001\000\007\006\003\000\004\006\002\000\006\006\004\000\r\006\005\000\003\006\001\000\007\006\016\000\005\007\032\000\005\007\020\000\002\006\023\000\001\006\013\000\005\007\005\000\006\007\001\000\001\006\r\000\001\006\020\000\r\006\003\000\032\006\026\000\r\007\004\000\001\007\003\000\f\007\021\000\001\006\004\000\001\006\002\000\n\006\001\000\001\006\003\000\005\006\006\000\001\006\001\000\001\006\001\000\001\006\001\000\004\006\001\000\013\006\002\000\004\006\005\000\005\006\004\000\001\006\021\000)\006੷\000/\006\001\000/\006\001\000\006\006\000\004\006\003\007\016\000&\006\n\0006\006\t\000\001\006\017\000\001\007\027\006\t\000\007\006\001\000\007\006\001\000\007\006\001\000\007\006\001\000\007\006\001\000\007\006\001\000\007\006\001\000\007\006\001\000 \007/\000\001\006Ǖ\000\003\006\031\000\t\006\006\007\001\000\005\006\002\000\005\006\004\000V\006\002\000\002\007\002\000\003\006\001\000Z\006\001\000\004\006\005\000)\006\003\000^\006\021\000\033\0065\000\020\006Ȁ\000ᦶ\006J\000凌\0064\000ҍ\006C\000.\006\002\000č\006\003\000\020\006\n\007\002\006\024\000/\006\001\007\f\000\002\007\001\000\031\006\b\000P\006\002\007%\000\t\006\002\000g\006\002\000\004\006\001\000\002\006\016\000\n\006P\000\b\006\001\007\003\006\001\007\004\006\001\007\027\006\005\007\020\000\001\006\007\0004\006\f\000\002\0072\006\021\007\013\000\n\007\006\000\022\007\006\006\003\000\001\006\004\000\n\007\034\006\b\007\002\000\027\006\r\007\f\000\035\006\003\000\004\007/\006\016\007\016\000\001\006\n\007&\000)\006\016\007\t\000\003\006\001\007\b\006\002\007\002\000\n\007\006\000\027\006\003\000\001\006\001\007\004\0000\006\001\007\001\006\003\007\002\006\002\007\005\006\002\007\001\006\001\007\001\006\030\000\003\006#\000\006\006\002\000\006\006\002\000\006\006\t\000\007\006\001\000\007\006\000#\006\b\007\001\000\002\007\002\000\n\007\006\000⮤\006\f\000\027\006\004\0001\006℄\000Į\006\002\000>\006\002\000j\006&\000\007\006\f\000\005\006\005\000\001\006\001\007\n\006\001\000\r\006\001\000\005\006\001\000\001\006\001\000\002\006\001\000\002\006\001\000l\006!\000ū\006\022\000@\006\002\0006\006(\000\r\006\003\000\020\007\020\000\007\007\f\000\002\006\030\000\003\006\031\000\001\006\006\000\005\006\001\000\006\002\000\001\007\004\000\001\006\013\000\n\007\007\000\032\006\004\000\001\006\001\000\032\006\013\000Y\006\003\000\006\006\002\000\006\006\002\000\006\006\002\000\003\006\003\000\002\006\003\000\002\006\022\000\003\007\004\000\f\006\001\000\032\006\001\000\023\006\001\000\002\006\001\000\017\006\002\000\016\006\"\000{\006E\0005\006\000\001\007\000\035\006\003\0001\006/\000\037\006\021\000\033\0065\000\036\006\002\000$\006\004\000\b\006\001\000\005\006*\000\006\002\000\n\007͖\000\006\006\002\000\001\006\001\000,\006\001\000\002\006\003\000\001\006\002\000\027\006ª\000\026\006\n\000\032\006Æ\000\001\006\003\007\001\000\002\007\005\000\004\007\004\006\001\000\003\006\001\000\033\006\004\000\003\007\004\000\001\007 \000\035\006\0006\006\n\000\026\006\n\000\023\006\000I\006η\000\003\0075\006\017\007\037\000\n\007\020\000\003\007-\006\013\007\002\000\001\007ག\000ͯ\006\000c\006஝\000Я\006㏑\000ȹ\006䗇\000\002\006Ⅳ\000\005\007\003\000\026\007\002\000\007\007\036\000\004\007\000\003\007ƻ\000U\006\001\000G\006\001\000\002\006\002\000\001\006\002\000\002\006\002\000\004\006\001\000\f\006\001\000\001\006\001\000\007\006\001\000A\006\001\000\004\006\002\000\b\006\001\000\007\006\001\000\034\006\001\000\004\006\001\000\005\006\001\000\001\006\003\000\007\006\001\000Ŕ\006\002\000\031\006\001\000\031\006\001\000\037\006\001\000\031\006\001\000\037\006\001\000\031\006\001\000\037\006\001\000\031\006\001\000\037\006\001\000\031\006\001\000\b\006\002\0002\007⠀\000ꛗ\006)\000ဵ\006\013\000Þ\006㿢\000Ȟ\006￿\000￿\000￿\000￿\000￿\000￿\000￿\000￿\000￿\000￿\000￿\000׮\000\001\007\036\000`\007\000ð\007￿\000￿\000︒\000");
  private static final int[] ZZ_ACTION = zzUnpackAction();
  private static final String ZZ_ACTION_PACKED_0 = "\001\000\001\001\002\002\001\001\001\003\002\004\b\003\001\005\001\006\001\007\001\b\001\t\001\n\001\013\001\002\001\000\013\003\001\000\b\003\001\f\006\003\001\r\003\003\001\016\001\017\004\003\001\020\002\003\001\021\001\003\001\022\001\023\001\024\001\003\001\025\001\003\001\026\001\027";
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
  private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\000%\000%\000J\000o\000\000%\000¹\000Þ\000ă\000Ĩ\000ō\000Ų\000Ɨ\000Ƽ\000ǡ\000\000%\000%\000%\000%\000%\000%\000Ȇ\000ȫ\000ɐ\000ɵ\000ʚ\000ʿ\000ˤ\000̉\000̮\000͓\000͸\000Ν\000ς\000ϧ\000Ќ\000б\000і\000ѻ\000Ҡ\000Ӆ\000Ӫ\000ԏ\000\000Դ\000ՙ\000վ\000֣\000׈\000׭\000\000ؒ\000ط\000ٜ\000\000\000ځ\000ڦ\000ۋ\000۰\000\000ܕ\000ܺ\000\000ݟ\000\000\000\000ބ\000\000ީ\000\000";
  private static final int[] ZZ_TRANS = zzUnpackTrans();
  private static final String ZZ_TRANS_PACKED_0 = "\001\002\001\003\001\004\001\003\001\005\001\002\001\006\001\002\001\007\001\b\001\t\003\006\001\n\001\006\001\013\001\006\001\f\001\r\003\006\001\016\001\006\001\017\001\020\003\006\001\021\001\022\001\023\001\024\001\025\001\026\001\027&\000\001\003'\000\001\030\001\031%\000\031\006\016\000\002\b!\000\005\006\001\032\004\006\001\033\013\006\001\034\002\006\f\000\022\006\001\035\006\006\f\000\013\006\001\036\r\006\f\000\022\006\001\037\006\006\f\000\b\006\001 \020\006\f\000\022\006\001!\006\006\f\000\025\006\001\"\003\006\f\000\013\006\001#\006\006\001$\006\006\006\000\001\030\001\003\001\004\"\030\005\031\001%\037\031\006\000\006\006\001&\022\006\f\000\016\006\001'\n\006\f\000\022\006\001(\006\006\f\000\025\006\001)\003\006\f\000\007\006\001*\021\006\f\000\017\006\001+\t\006\f\000\022\006\001,\006\006\f\000\023\006\001-\005\006\f\000\n\006\001.\016\006\f\000\n\006\001/\016\006\f\000\022\006\0010\006\006\006\000\004\031\001\003\001%\037\031\006\000\007\006\0011\021\006\f\000\017\006\0012\003\006\0013\005\006\f\000\016\006\0014\n\006\f\000\027\006\0015\001\006\f\000\t\006\0016\017\006\f\000\024\006\0017\004\006\f\000\005\006\0018\023\006\f\000\f\006\0019\f\006\f\000\t\006\001:\017\006\f\000\b\006\001;\020\006\f\000\b\006\001<\020\006\f\000\020\006\001=\b\006\f\000\025\006\001>\003\006\f\000\n\006\001?\016\006\f\000\f\006\001@\f\006\f\000\b\006\001A\020\006\f\000\n\006\001B\016\006\f\000\t\006\001C\017\006\f\000\t\006\001D\017\006\f\000\n\006\001E\016\006\f\000\027\006\001F\001\006\f\000\t\006\001G\017\006\f\000\t\006\001H\017\006\f\000\005\006\001I\023\006\f\000\r\006\001J\013\006\f\000\025\006\001K\003\006\006\000";
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final String[] ZZ_ERROR_MSG = { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\001\000\002\t\003\001\001\t\n\001\006\t\001\001\001\000\013\001\001\000&\001";
  private Reader zzReader;
  private int zzState;
  private int zzLexicalState = 0;
  private char[] zzBuffer = new char['䀀'];
  private int zzMarkedPos;
  private int zzCurrentPos;
  private int zzStartRead;
  private int zzEndRead;
  private int yyline;
  private int yychar;
  private int yycolumn;
  private boolean zzAtBOL = true;
  private boolean zzAtEOF;
  private boolean zzEOFDone;
  private int zzFinalHighSurrogate = 0;
  StringBuffer strbuf = new StringBuffer(128);
  
  private static int[] zzUnpackAction()
  {
    int[] arrayOfInt = new int[75];
    int i = 0;
    i = zzUnpackAction("\001\000\001\001\002\002\001\001\001\003\002\004\b\003\001\005\001\006\001\007\001\b\001\t\001\n\001\013\001\002\001\000\013\003\001\000\b\003\001\f\006\003\001\r\003\003\001\016\001\017\004\003\001\020\002\003\001\021\001\003\001\022\001\023\001\024\001\003\001\025\001\003\001\026\001\027", i, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int zzUnpackAction(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i = 0;
    int j = paramInt;
    int k = paramString.length();
    while (i < k)
    {
      int m = paramString.charAt(i++);
      int n = paramString.charAt(i++);
      do
      {
        paramArrayOfInt[(j++)] = n;
        m--;
      } while (m > 0);
    }
    return j;
  }
  
  private static int[] zzUnpackRowMap()
  {
    int[] arrayOfInt = new int[75];
    int i = 0;
    i = zzUnpackRowMap("\000\000\000%\000%\000J\000o\000\000%\000¹\000Þ\000ă\000Ĩ\000ō\000Ų\000Ɨ\000Ƽ\000ǡ\000\000%\000%\000%\000%\000%\000%\000Ȇ\000ȫ\000ɐ\000ɵ\000ʚ\000ʿ\000ˤ\000̉\000̮\000͓\000͸\000Ν\000ς\000ϧ\000Ќ\000б\000і\000ѻ\000Ҡ\000Ӆ\000Ӫ\000ԏ\000\000Դ\000ՙ\000վ\000֣\000׈\000׭\000\000ؒ\000ط\000ٜ\000\000\000ځ\000ڦ\000ۋ\000۰\000\000ܕ\000ܺ\000\000ݟ\000\000\000\000ބ\000\000ީ\000\000", i, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int zzUnpackRowMap(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i = 0;
    int j = paramInt;
    int k = paramString.length();
    while (i < k)
    {
      int m = paramString.charAt(i++) << '\020';
      paramArrayOfInt[(j++)] = (m | paramString.charAt(i++));
    }
    return j;
  }
  
  private static int[] zzUnpackTrans()
  {
    int[] arrayOfInt = new int['ߎ'];
    int i = 0;
    i = zzUnpackTrans("\001\002\001\003\001\004\001\003\001\005\001\002\001\006\001\002\001\007\001\b\001\t\003\006\001\n\001\006\001\013\001\006\001\f\001\r\003\006\001\016\001\006\001\017\001\020\003\006\001\021\001\022\001\023\001\024\001\025\001\026\001\027&\000\001\003'\000\001\030\001\031%\000\031\006\016\000\002\b!\000\005\006\001\032\004\006\001\033\013\006\001\034\002\006\f\000\022\006\001\035\006\006\f\000\013\006\001\036\r\006\f\000\022\006\001\037\006\006\f\000\b\006\001 \020\006\f\000\022\006\001!\006\006\f\000\025\006\001\"\003\006\f\000\013\006\001#\006\006\001$\006\006\006\000\001\030\001\003\001\004\"\030\005\031\001%\037\031\006\000\006\006\001&\022\006\f\000\016\006\001'\n\006\f\000\022\006\001(\006\006\f\000\025\006\001)\003\006\f\000\007\006\001*\021\006\f\000\017\006\001+\t\006\f\000\022\006\001,\006\006\f\000\023\006\001-\005\006\f\000\n\006\001.\016\006\f\000\n\006\001/\016\006\f\000\022\006\0010\006\006\006\000\004\031\001\003\001%\037\031\006\000\007\006\0011\021\006\f\000\017\006\0012\003\006\0013\005\006\f\000\016\006\0014\n\006\f\000\027\006\0015\001\006\f\000\t\006\0016\017\006\f\000\024\006\0017\004\006\f\000\005\006\0018\023\006\f\000\f\006\0019\f\006\f\000\t\006\001:\017\006\f\000\b\006\001;\020\006\f\000\b\006\001<\020\006\f\000\020\006\001=\b\006\f\000\025\006\001>\003\006\f\000\n\006\001?\016\006\f\000\f\006\001@\f\006\f\000\b\006\001A\020\006\f\000\n\006\001B\016\006\f\000\t\006\001C\017\006\f\000\t\006\001D\017\006\f\000\n\006\001E\016\006\f\000\027\006\001F\001\006\f\000\t\006\001G\017\006\f\000\t\006\001H\017\006\f\000\005\006\001I\023\006\f\000\r\006\001J\013\006\f\000\025\006\001K\003\006\006\000", i, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int zzUnpackTrans(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i = 0;
    int j = paramInt;
    int k = paramString.length();
    while (i < k)
    {
      int m = paramString.charAt(i++);
      int n = paramString.charAt(i++);
      n--;
      do
      {
        paramArrayOfInt[(j++)] = n;
        m--;
      } while (m > 0);
    }
    return j;
  }
  
  private static int[] zzUnpackAttribute()
  {
    int[] arrayOfInt = new int[75];
    int i = 0;
    i = zzUnpackAttribute("\001\000\002\t\003\001\001\t\n\001\006\t\001\001\001\000\013\001\001\000&\001", i, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int zzUnpackAttribute(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i = 0;
    int j = paramInt;
    int k = paramString.length();
    while (i < k)
    {
      int m = paramString.charAt(i++);
      int n = paramString.charAt(i++);
      do
      {
        paramArrayOfInt[(j++)] = n;
        m--;
      } while (m > 0);
    }
    return j;
  }
  
  private Symbol sym(short paramShort)
  {
    return new Symbol(paramShort, this.yyline + 1, this.yycolumn + 1, len(), str());
  }
  
  private Symbol sym(short paramShort, String paramString)
  {
    return new Symbol(paramShort, this.yyline + 1, this.yycolumn + 1, len(), paramString);
  }
  
  private String str()
  {
    return yytext();
  }
  
  private int len()
  {
    return yylength();
  }
  
  public LabCommScanner(Reader paramReader)
  {
    this.zzReader = paramReader;
  }
  
  private static char[] zzUnpackCMap(String paramString)
  {
    char[] arrayOfChar = new char[1114112];
    int i = 0;
    int j = 0;
    while (i < 2590)
    {
      int k = paramString.charAt(i++);
      char m = paramString.charAt(i++);
      do
      {
        arrayOfChar[(j++)] = m;
        k--;
      } while (k > 0);
    }
    return arrayOfChar;
  }
  
  private boolean zzRefill()
    throws IOException
  {
    if (this.zzStartRead > 0)
    {
      this.zzEndRead += this.zzFinalHighSurrogate;
      this.zzFinalHighSurrogate = 0;
      System.arraycopy(this.zzBuffer, this.zzStartRead, this.zzBuffer, 0, this.zzEndRead - this.zzStartRead);
      this.zzEndRead -= this.zzStartRead;
      this.zzCurrentPos -= this.zzStartRead;
      this.zzMarkedPos -= this.zzStartRead;
      this.zzStartRead = 0;
    }
    if (this.zzCurrentPos >= this.zzBuffer.length - this.zzFinalHighSurrogate)
    {
      char[] arrayOfChar = new char[this.zzBuffer.length * 2];
      System.arraycopy(this.zzBuffer, 0, arrayOfChar, 0, this.zzBuffer.length);
      this.zzBuffer = arrayOfChar;
      this.zzEndRead += this.zzFinalHighSurrogate;
      this.zzFinalHighSurrogate = 0;
    }
    int i = this.zzBuffer.length - this.zzEndRead;
    int j = 0;
    while (j < i)
    {
      int k = this.zzReader.read(this.zzBuffer, this.zzEndRead + j, i - j);
      if (k == -1) {
        break;
      }
      j += k;
    }
    if (j > 0)
    {
      this.zzEndRead += j;
      if ((j == i) && (Character.isHighSurrogate(this.zzBuffer[(this.zzEndRead - 1)])))
      {
        this.zzEndRead -= 1;
        this.zzFinalHighSurrogate = 1;
      }
      return false;
    }
    return true;
  }
  
  public final void yyclose()
    throws IOException
  {
    this.zzAtEOF = true;
    this.zzEndRead = this.zzStartRead;
    if (this.zzReader != null) {
      this.zzReader.close();
    }
  }
  
  public final void yyreset(Reader paramReader)
  {
    this.zzReader = paramReader;
    this.zzAtBOL = true;
    this.zzAtEOF = false;
    this.zzEOFDone = false;
    this.zzEndRead = (this.zzStartRead = 0);
    this.zzCurrentPos = (this.zzMarkedPos = 0);
    this.zzFinalHighSurrogate = 0;
    this.yyline = (this.yychar = this.yycolumn = 0);
    this.zzLexicalState = 0;
    if (this.zzBuffer.length > 16384) {
      this.zzBuffer = new char['䀀'];
    }
  }
  
  public final int yystate()
  {
    return this.zzLexicalState;
  }
  
  public final void yybegin(int paramInt)
  {
    this.zzLexicalState = paramInt;
  }
  
  public final String yytext()
  {
    return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
  }
  
  public final char yycharat(int paramInt)
  {
    return this.zzBuffer[(this.zzStartRead + paramInt)];
  }
  
  public final int yylength()
  {
    return this.zzMarkedPos - this.zzStartRead;
  }
  
  private void zzScanError(int paramInt)
  {
    String str;
    try
    {
      str = ZZ_ERROR_MSG[paramInt];
    }
    catch (ArrayIndexOutOfBoundsException localArrayIndexOutOfBoundsException)
    {
      str = ZZ_ERROR_MSG[0];
    }
    throw new Error(str);
  }
  
  public void yypushback(int paramInt)
  {
    if (paramInt > yylength()) {
      zzScanError(2);
    }
    this.zzMarkedPos -= paramInt;
  }
  
  public Symbol nextToken()
    throws IOException, Scanner.Exception
  {
    int n = this.zzEndRead;
    char[] arrayOfChar1 = this.zzBuffer;
    char[] arrayOfChar2 = ZZ_CMAP;
    int[] arrayOfInt1 = ZZ_TRANS;
    int[] arrayOfInt2 = ZZ_ROWMAP;
    int[] arrayOfInt3 = ZZ_ATTRIBUTE;
    for (;;)
    {
      int m = this.zzMarkedPos;
      int i1 = 0;
      int k = this.zzStartRead;
      while (k < m)
      {
        int i2 = Character.codePointAt(arrayOfChar1, k, m);
        int i3 = Character.charCount(i2);
        switch (i2)
        {
        case 11: 
        case 12: 
        case 133: 
        case 8232: 
        case 8233: 
          this.yyline += 1;
          this.yycolumn = 0;
          i1 = 0;
          break;
        case 13: 
          this.yyline += 1;
          this.yycolumn = 0;
          i1 = 1;
          break;
        case 10: 
          if (i1 != 0)
          {
            i1 = 0;
          }
          else
          {
            this.yyline += 1;
            this.yycolumn = 0;
          }
          break;
        default: 
          i1 = 0;
          this.yycolumn += i3;
        }
        k += i3;
      }
      boolean bool;
      if (i1 != 0)
      {
        int i4;
        if (m < n)
        {
          i4 = arrayOfChar1[m] == '\n' ? 1 : 0;
        }
        else if (this.zzAtEOF)
        {
          i4 = 0;
        }
        else
        {
          bool = zzRefill();
          n = this.zzEndRead;
          m = this.zzMarkedPos;
          arrayOfChar1 = this.zzBuffer;
          if (bool) {
            i4 = 0;
          } else {
            i4 = arrayOfChar1[m] == '\n' ? 1 : 0;
          }
        }
        if (i4 != 0) {
          this.yyline -= 1;
        }
      }
      int j = -1;
      k = this.zzCurrentPos = this.zzStartRead = m;
      this.zzState = ZZ_LEXSTATE[this.zzLexicalState];
      int i4 = arrayOfInt3[this.zzState];
      if ((i4 & 0x1) == 1) {
        j = this.zzState;
      }
      int i;
      for (;;)
      {
        if (k < n)
        {
          i = Character.codePointAt(arrayOfChar1, k, n);
          k += Character.charCount(i);
        }
        else
        {
          if (this.zzAtEOF)
          {
            i = -1;
            break;
          }
          this.zzCurrentPos = k;
          this.zzMarkedPos = m;
          bool = zzRefill();
          k = this.zzCurrentPos;
          m = this.zzMarkedPos;
          arrayOfChar1 = this.zzBuffer;
          n = this.zzEndRead;
          if (bool)
          {
            i = -1;
            break;
          }
          i = Character.codePointAt(arrayOfChar1, k, n);
          k += Character.charCount(i);
        }
        int i5 = arrayOfInt1[(arrayOfInt2[this.zzState] + arrayOfChar2[i])];
        if (i5 == -1) {
          break;
        }
        this.zzState = i5;
        i4 = arrayOfInt3[this.zzState];
        if ((i4 & 0x1) == 1)
        {
          j = this.zzState;
          m = k;
          if ((i4 & 0x8) == 8) {
            break;
          }
        }
      }
      this.zzMarkedPos = m;
      switch (j < 0 ? j : ZZ_ACTION[j])
      {
      case 1: 
        throw new RuntimeException("Illegal character \"" + str() + "\" at line " + this.yyline + ", column " + this.yycolumn);
      case 24: 
        break;
      case 2: 
      case 25: 
        break;
      case 3: 
        return sym((short)2);
      case 26: 
        break;
      case 4: 
        return sym((short)20);
      case 27: 
        break;
      case 5: 
        return sym((short)21);
      case 28: 
        break;
      case 6: 
        return sym((short)6);
      case 29: 
        break;
      case 7: 
        return sym((short)7);
      case 30: 
        break;
      case 8: 
        return sym((short)8);
      case 31: 
        break;
      case 9: 
        return sym((short)9);
      case 32: 
        break;
      case 10: 
        return sym((short)3);
      case 33: 
        break;
      case 11: 
        return sym((short)19);
      case 34: 
        break;
      case 12: 
        return sym((short)13);
      case 35: 
        break;
      case 13: 
        return sym((short)14);
      case 36: 
        break;
      case 14: 
        return sym((short)18);
      case 37: 
        break;
      case 15: 
        return sym((short)11);
      case 38: 
        break;
      case 16: 
        return sym((short)12);
      case 39: 
        break;
      case 17: 
        return sym((short)15);
      case 40: 
        break;
      case 18: 
        return sym((short)4);
      case 41: 
        break;
      case 19: 
        return sym((short)5);
      case 42: 
        break;
      case 20: 
        return sym((short)17);
      case 43: 
        break;
      case 21: 
        return sym((short)16);
      case 44: 
        break;
      case 22: 
        return sym((short)1);
      case 45: 
        break;
      case 23: 
        return sym((short)10);
      case 46: 
        break;
      default: 
        if ((i == -1) && (this.zzStartRead == this.zzCurrentPos))
        {
          this.zzAtEOF = true;
          return sym((short)0);
        }
        zzScanError(1);
      }
    }
  }
}


/* Location:              /home/dimon/GIT5/Memoire/JGrafchart/JGrafchart-2.6.1/lib/JGrafchart.jar!/AST/LabCommScanner.class
 * Java compiler version: 7 (51.0)
 * JD-Core Version:       0.7.1
 */